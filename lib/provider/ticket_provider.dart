import 'package:firebase_auth/firebase_auth.dart' as auth;import 'package:firebase_database/firebase_database.dart';import 'package:flutter/cupertino.dart';import 'package:online_ticked/core/constants/app_referance.dart';import 'package:online_ticked/core/constants/ticket_state.dart';import 'package:online_ticked/data/models/ticket.dart';import 'package:online_ticked/data/services/firebase_database_service.dart';import 'package:online_ticked/util/extension.dart';import 'package:shared_preferences/shared_preferences.dart';class TicketProvider extends ChangeNotifier {  final _tickets = <Ticket>[];  void listen() {    FirebaseDatabaseService.instance        .onValue(AppReferance.tickets.value)        .listen((event) {      if (event.snapshot.value != null) {        var data = event.snapshot.value;        _tickets.clear();        (data as Map).forEach((key, value) {          _tickets.add(Ticket.fromMap(Map<String, dynamic>.from(value)));        });        _tickets.sort((a, b) => a.createdAt.compareTo(b.createdAt));        notifyListeners();      }    });  }  get tickets => _tickets;  Ticket? getTicketFromId(String id){    return _tickets.where((element) => element.id == id).toList().firstOrNull;  }  void useTicket(Ticket ticket){    ticket.state = TicketState.used;    ticket.usedAt = DateTime.now().dateNow;    FirebaseDatabaseService.instance.updateData(      path: '${AppReferance.tickets.value}/${ticket.id}',      data: ticket.toMap()    );    notifyListeners();  }  void cancelTicket(Ticket ticket){    ticket.state = TicketState.canceled;    FirebaseDatabaseService.instance.updateData(        path: '${AppReferance.tickets.value}/${ticket.id}',        data: ticket.toMap()    );    notifyListeners();  }}