import 'package:flutter/material.dart';import 'package:flutter_pdfview/flutter_pdfview.dart';import 'package:go_router/go_router.dart';import 'package:online_ticked/core/constants/ticket_state.dart';import 'package:online_ticked/provider/ticket_provider.dart';import 'package:online_ticked/ui/screens/ticket_list/ticket_list_mixin.dart';import 'package:online_ticked/ui/widgets/pdf_preview_screen.dart';import 'package:online_ticked/ui/widgets/pdf_widget.dart';import 'package:online_ticked/util/bildiriler.dart';import 'package:online_ticked/util/extension.dart';import 'package:provider/provider.dart';/// TicketList ekranıclass TicketList extends StatefulWidget {  /// TicketList ekranı  const TicketList({super.key});  @override  State<TicketList> createState() => _TicketListState();}class _TicketListState extends State<TicketList> with TicketListMixin {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text('Kayıtlı Biletler'),      ),      body: SafeArea(        child: SingleChildScrollView(          child: Column(            children: [              Builder(builder: (context) {                final tickets = context.watch<TicketProvider>().tickets;                return GridView.builder(                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                    crossAxisCount: 2,                  ),                  shrinkWrap: true,                  physics: const NeverScrollableScrollPhysics(),                  itemCount: TicketState.values.length,                  itemBuilder: (context, index) {                    final state = TicketState.values[index];                    final count = tickets                        .where((element) => element.state == state)                        .length;                    final totalPrice = tickets                        .where((element) => element.state == state)                        .map((e) => e.price)                        .fold<double>(0.0, (previousValue, element) => double.parse(previousValue.toString()) + double.parse(element.toString()) );                    return InkWell(                        onTap: () => onTicketStateSelected(state),                        child: Card(                          color: state.color,                          child: Column(                            mainAxisAlignment: MainAxisAlignment.center,                            children: [                              Icon(                                state.icon,                                color: Colors.white,                                size: 48,                              ),                              Text(                                state.title,                                style: context.textTheme.titleLarge?.copyWith(                                  color: Colors.white,                                ),                              ),                              Text(                                count.toString(),                                style: context.textTheme.titleLarge?.copyWith(                                  color: Colors.white,                                ),                              ),                              Text(                                totalPrice.toStringAsFixed(2),                                style: context.textTheme.titleLarge?.copyWith(                                  color: Colors.white,                                ),                              ),                            ],                          ),                        ));                  },                );              }),              AnimatedContainer(                  duration: Duration(milliseconds: 500),                  child: selectedState != null                      ? FilledButton(                          onPressed: () => onTicketStateSelected(null),                          child: Center(child: Text('Tüm Biletleri Listele')))                      : SizedBox(),),              Builder(builder: (context) {                var tickets = context.watch<TicketProvider>().tickets;                if(selectedState !=null){                  tickets = tickets.where((element) => element.state == selectedState).toList();                }                if(tickets.isEmpty){                  return SizedBox(                      height: 200,                      child: Center(child: Text('Bilet Bulunamadı',                  style: context.textTheme.titleLarge                  )));                }                return ListView.builder(                  itemCount: tickets.length,                  physics: const NeverScrollableScrollPhysics(),                  shrinkWrap: true,                  itemBuilder: (context, index) {                    final ticket = tickets[index];                    return Padding(                      padding: const EdgeInsets.all(8.0),                      child: Container(                        decoration: BoxDecoration(                          borderRadius: BorderRadius.circular(8),                          color: ticket.state.color,                        ),                        child: ListTile(                          leading: Icon(ticket.state.icon),                          title: Text(ticket.title),                          subtitle: Column(                            mainAxisSize: MainAxisSize.min,                            children: [                              Align(                                  alignment: Alignment.centerLeft,                                  child: Text(ticket.description )),                              Align(                                  alignment: Alignment.centerLeft,                                  child: Text(' Fiyat: ${ticket.price.toStringAsFixed(2)}',                              style: context.textTheme.titleSmall,                              )),                            ],                          ),                          trailing: PopupMenuButton(                            itemBuilder: (context) {                              return [                                PopupMenuItem(                                  child: ListTile(                                    title: const Text('Görüntüle'),                                    leading: const Icon(Icons.remove_red_eye_outlined),                                    onTap: () async {                                      final file = await PdfWidget.instance.createFile(ticket);                                      Navigator.of(context).push(MaterialPageRoute(                                        builder: (context) => PdfPreviewScreen(file.path),                                      ));                                    },                                  ),                                ),                                PopupMenuItem(                                  child: ListTile(                                    title: const Text('Paylaş'),                                    leading: const Icon(Icons.share),                                    onTap: () =>PdfWidget.instance.create(ticket),                                  ),                                ),                                if(ticket.state == TicketState.ready)                                  PopupMenuItem(                                    child: ListTile(                                      title: const Text('Kullan'),                                      leading: const Icon(Icons.check),                                      onTap: () async {                                        final response = await bildiriCevap(context, 'Hediye Kartı Kullanılsın mı?');                                        if(!response){                                          return;                                        }                                        context.read<TicketProvider>().useTicket(ticket);                                        context.pop();                                        bildiri(context, 'Hediye Kartı Kullanıldı',);                                      },                                    ),                                  ),                                if(ticket.state == TicketState.ready)                                  PopupMenuItem(                                    child: ListTile(                                      title: const Text('İptal Et'),                                      leading: const Icon(Icons.cancel),                                      onTap: () async {                                        final response = await bildiriCevap(context, 'Hediye kartı iptal edilsin mi?');                                        if(!response){                                          return;                                        }                                        context.read<TicketProvider>().cancelTicket(ticket);                                        context.pop();                                        bildiri(context, 'Hediye Kartı İptal Edildi',);                                      },                                    ),                                  ),                              ];                            },                          ),                          /*Row(                            mainAxisSize: MainAxisSize.min,                            children: [                              IconButton(                                icon: Icon(Icons.remove_red_eye_outlined),                                onPressed: () async {                                  final file = await PdfWidget.instance.createFile(ticket);                                  Navigator.of(context).push(MaterialPageRoute(                                    builder: (context) => PdfPreviewScreen(file.path),                                  ));                                },                              ),                              IconButton(                                icon: Icon(Icons.share),                                onPressed: () => PdfWidget.instance.create(ticket),                              ),                            ],                          ),*/                        ),                      ),                    );                  },                );              }),            ],          ),        ),      ),    );  }}